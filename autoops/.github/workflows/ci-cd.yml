name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r services/model_service/requirements.txt
        pip install black ruff pytest
    
    - name: Lint with black
      run: black --check .
    
    - name: Lint with ruff
      run: ruff check .
    
    - name: Test with pytest
      run: pytest tests/ services/model_service/tests/ -v
    
    - name: Build Docker image
      run: |
        cd services/model_service
        docker build -t autoops/model-service:${{ github.sha }} .
        docker build -t autoops/model-service:latest .
    
    - name: Push to registry (if secrets available)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' && secrets.REGISTRY_URL
      run: |
        echo ${{ secrets.REGISTRY_TOKEN }} | docker login ${{ secrets.REGISTRY_URL }} -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin
        docker tag autoops/model-service:${{ github.sha }} ${{ secrets.REGISTRY_URL }}/autoops/model-service:${{ github.sha }}
        docker tag autoops/model-service:latest ${{ secrets.REGISTRY_URL }}/autoops/model-service:latest
        docker push ${{ secrets.REGISTRY_URL }}/autoops/model-service:${{ github.sha }}
        docker push ${{ secrets.REGISTRY_URL }}/autoops/model-service:latest
    
    - name: Deploy to Kubernetes (if secrets available)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' && secrets.KUBECONFIG
      run: |
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl apply -f infra/k8s/overlays/production/
